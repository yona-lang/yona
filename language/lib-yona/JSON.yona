module JSON exports generate as
    generate ()                                     = "null"
    generate val
        | Types::is_char val                        = if val == "\"" then "\\\"" else "\"{val}\""
        | Types::is_function val                    = raise :nomatch "Functions cannot be serialized to JSON"
        | Types::is_tuple val                       = generate <| Tuple::to_seq val
        | Types::is_module val                      = raise :nomatch "Modules cannot be serialized to JSON"
        | Types::is_seq val && Seq::is_string val   = "\"{(normalize_string val)}\""
        | Types::is_seq val                         = "[{let (res, _) = Seq::foldl element_fold ([], Seq::len val) val in res}]"
        | Types::is_dict val                        = "{{{let (res, _) = Dict::fold key_val_fold ([], Dict::len val) val in res}}}"
        | Types::is_set val                         = "[{let (res, _) = Set::fold element_fold ([], Set::len val) val in res}]"
        | Types::is_native val                      = raise :nomatch "Native objects cannot be serialized to JSON"
        | Types::is_symbol val                      = "\"{val}\""
        | true                                      = "{val}"

    element_fold (acc, remains) el                  = ("{acc}{(generate el)}" ++ if remains > 1 then ", " else "", remains - 1)
    key_val_fold (acc, remains) (key, val)          = ("{acc}{(generate key)}: {(generate val)}" ++ if remains > 1 then ", " else "", remains - 1)

    # TODO replace this with a generator, after closing https://github.com/yona-lang/yona/issues/68
    normalize_string s = Seq::foldl (\acc c -> if c == '"' then acc ++ "\\\"" else acc |- c) "" s
end
